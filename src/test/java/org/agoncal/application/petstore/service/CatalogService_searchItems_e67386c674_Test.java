// Test generated by RoostGPT for test petstore using AI Type Open AI and AI Model gpt-4

package org.agoncal.application.petstore.service;

import org.agoncal.application.petstore.model.Item;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

public class CatalogService_searchItems_e67386c674_Test {

    @Mock
    private EntityManager em;

    @Mock
    private TypedQuery<Item> typedQuery;

    @InjectMocks
    private CatalogService catalogService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testSearchItemsWithKeyword() {
        // Arrange
        Item item1 = new Item();
        Item item2 = new Item();
        List<Item> expectedItems = Arrays.asList(item1, item2);

        when(em.createNamedQuery(eq(Item.SEARCH), eq(Item.class))).thenReturn(typedQuery);
        when(typedQuery.setParameter(eq("keyword"), any(String.class))).thenReturn(typedQuery);
        when(typedQuery.getResultList()).thenReturn(expectedItems);

        // Act
        List<Item> actualItems = catalogService.searchItems("test");

        // Assert
        assertEquals(expectedItems, actualItems);
    }

    @Test
    public void testSearchItemsWithNullKeyword() {
        // Arrange
        Item item1 = new Item();
        Item item2 = new Item();
        List<Item> expectedItems = Arrays.asList(item1, item2);

        when(em.createNamedQuery(eq(Item.SEARCH), eq(Item.class))).thenReturn(typedQuery);
        when(typedQuery.setParameter(eq("keyword"), any(String.class))).thenReturn(typedQuery);
        when(typedQuery.getResultList()).thenReturn(expectedItems);

        // Act
        List<Item> actualItems = catalogService.searchItems(null);

        // Assert
        assertEquals(expectedItems, actualItems);
    }
}
