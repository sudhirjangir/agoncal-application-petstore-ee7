/*
Test generated by RoostGPT for test petstoredemo2 using AI Type Open AI and AI Model gpt-4

1. Scenario: Verify the function with a valid categoryId that exists in the database.
   - Input: Pass a valid categoryId that exists in the database.
   - Expected Output: The function should return the corresponding Category object.

2. Scenario: Verify the function with a valid categoryId that does not exist in the database.
   - Input: Pass a valid categoryId that does not exist in the database.
   - Expected Output: The function should return null.

3. Scenario: Verify the function with a null categoryId.
   - Input: Pass null as the categoryId.
   - Expected Output: The function should throw a ConstraintViolationException due to the @NotNull annotation.

4. Scenario: Verify the function when the database is empty.
   - Input: Pass a valid categoryId while the database is empty.
   - Expected Output: The function should return null as there are no Category objects in the database.

5. Scenario: Verify the function with a negative categoryId.
   - Input: Pass a negative categoryId.
   - Expected Output: The function should return null as negative IDs typically do not exist.

6. Scenario: Verify the function with a categoryId of zero.
   - Input: Pass zero as the categoryId.
   - Expected Output: The function should return null as IDs typically start from 1.

7. Scenario: Verify the function when the EntityManager (em) is not initialized.
   - Input: Call the function without initializing the EntityManager (em).
   - Expected Output: The function should throw a NullPointerException.

8. Scenario: Verify the function with a categoryId corresponding to a different entity (not Category).
   - Input: Pass a valid categoryId that corresponds to a different entity (not Category) in the database.
   - Expected Output: The function should return null as the ID does not correspond to a Category object.
*/package org.agoncal.application.petstore.service;

import org.agoncal.application.petstore.model.Category;
import org.junit.Before;
import org.junit.Test;
import javax.persistence.EntityManager;
import javax.validation.ConstraintViolationException;

import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.mockito.Mockito.*;

public class CatalogService_findCategory_e3c33f103a_Test {

    private CatalogService catalogService;
    private EntityManager em;

    @Before
    public void setUp() {
        catalogService = new CatalogService();
        em = mock(EntityManager.class);
        catalogService.em = em;
    }

    @Test
    public void testFindCategory_ValidId() {
        Category category = new Category();
        when(em.find(Category.class, 1L)).thenReturn(category);
        assertSame(category, catalogService.findCategory(1L));
    }

    @Test
    public void testFindCategory_InvalidId() {
        when(em.find(Category.class, -1L)).thenReturn(null);
        assertNull(catalogService.findCategory(-1L));
    }

    @Test
    public void testFindCategory_ZeroId() {
        when(em.find(Category.class, 0L)).thenReturn(null);
        assertNull(catalogService.findCategory(0L));
    }

    @Test(expected = ConstraintViolationException.class)
    public void testFindCategory_NullId() {
        catalogService.findCategory(null);
    }

    @Test
    public void testFindCategory_EmptyDatabase() {
        when(em.find(Category.class, 1L)).thenReturn(null);
        assertNull(catalogService.findCategory(1L));
    }

    @Test(expected = NullPointerException.class)
    public void testFindCategory_EmNotInitialized() {
        catalogService.em = null;
        catalogService.findCategory(1L);
    }
}
