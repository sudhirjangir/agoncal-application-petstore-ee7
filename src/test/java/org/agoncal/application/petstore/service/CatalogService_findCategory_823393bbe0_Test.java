// Test generated by RoostGPT for test petstore using AI Type Open AI and AI Model gpt-4

package org.agoncal.application.petstore.service;

import org.agoncal.application.petstore.model.Category;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CatalogService_findCategory_823393bbe0_Test {

    @InjectMocks
    CatalogService catalogService;

    @Mock
    EntityManager em;

    @Mock
    TypedQuery<Category> typedQuery;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testFindCategoryWithValidName() {
        String categoryName = "Test Category";
        Category mockCategory = new Category();
        mockCategory.setName(categoryName);

        when(em.createNamedQuery(Category.FIND_BY_NAME, Category.class)).thenReturn(typedQuery);
        when(typedQuery.setParameter("pname", categoryName)).thenReturn(typedQuery);
        when(typedQuery.getSingleResult()).thenReturn(mockCategory);

        Category result = catalogService.findCategory(categoryName);

        assertEquals(mockCategory, result);
        verify(em, times(1)).createNamedQuery(Category.FIND_BY_NAME, Category.class);
        verify(typedQuery, times(1)).setParameter("pname", categoryName);
        verify(typedQuery, times(1)).getSingleResult();
    }

    @Test
    public void testFindCategoryWithInvalidName() {
        String categoryName = "Invalid Category";

        when(em.createNamedQuery(Category.FIND_BY_NAME, Category.class)).thenReturn(typedQuery);
        when(typedQuery.setParameter("pname", categoryName)).thenReturn(typedQuery);
        when(typedQuery.getSingleResult()).thenThrow(new RuntimeException());

        assertThrows(RuntimeException.class, () -> catalogService.findCategory(categoryName));
        verify(em, times(1)).createNamedQuery(Category.FIND_BY_NAME, Category.class);
        verify(typedQuery, times(1)).setParameter("pname", categoryName);
        verify(typedQuery, times(1)).getSingleResult();
    }
}
