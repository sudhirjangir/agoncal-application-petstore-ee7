/*
Test generated by RoostGPT for test petstoredemo2 using AI Type Open AI and AI Model gpt-4

1. Scenario: Check with a valid category name which is present in the database.
   - Input: Pass a valid category name as an argument to the 'findCategory' function.
   - Expected Output: The function should return the correct category object associated with the given category name.

2. Scenario: Check with a valid category name which is not present in the database.
   - Input: Pass a valid but non-existing category name as an argument to the 'findCategory' function.
   - Expected Output: The function should throw a 'NoResultException' as the expected query result does not exist.

3. Scenario: Check with a null category name.
   - Input: Pass a null value as the argument to the 'findCategory' function.
   - Expected Output: The function should throw a 'ConstraintViolationException' as the function argument is annotated with @NotNull.

4. Scenario: Check with an empty category name.
   - Input: Pass an empty string as the argument to the 'findCategory' function.
   - Expected Output: The function should throw a 'NoResultException' as there is no category with an empty name.

5. Scenario: Check with a category name consisting of only white spaces.
   - Input: Pass a string consisting of only spaces as the argument to the 'findCategory' function.
   - Expected Output: The function should throw a 'NoResultException' as there is no category with a name consisting of only spaces.

6. Scenario: Check with a category name having leading and trailing white spaces.
   - Input: Pass a valid category name with leading and trailing spaces as an argument to the 'findCategory' function.
   - Expected Output: The function should return the correct category object associated with the given category name after trimming the spaces.

7. Scenario: Check with a category name in a different case than stored in the database.
   - Input: Pass a valid category name in a different case (either all uppercase or lowercase) as an argument to the 'findCategory' function.
   - Expected Output: If the database is case-sensitive, the function should throw a 'NoResultException' as there is no matching category with the different case. If the database is not case-sensitive, it should return the correct category object associated with the given category name.
*/package org.agoncal.application.petstore.service;

import org.agoncal.application.petstore.model.Category;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.TypedQuery;
import javax.validation.ConstraintViolationException;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class CatalogService_findCategory_823393bbe0_Test {

    @InjectMocks
    private CatalogService catalogService;

    @Mock
    private EntityManager em;

    @Mock
    private TypedQuery<Category> typedQuery;

    @Test
    public void testFindCategory_ValidCategoryName() {
        String categoryName = "Dogs";
        Category category = new Category();
        category.setName(categoryName);

        when(em.createNamedQuery(Category.FIND_BY_NAME, Category.class)).thenReturn(typedQuery);
        when(typedQuery.setParameter("pname", categoryName)).thenReturn(typedQuery);
        when(typedQuery.getSingleResult()).thenReturn(category);

        Category result = catalogService.findCategory(categoryName);

        verify(em).createNamedQuery(Category.FIND_BY_NAME, Category.class);
        verify(typedQuery).setParameter("pname", categoryName);
        verify(typedQuery).getSingleResult();

        assertEquals(category, result);
    }

    @Test(expected = NoResultException.class)
    public void testFindCategory_ValidButNonExistingCategoryName() {
        String categoryName = "Birds";

        when(em.createNamedQuery(Category.FIND_BY_NAME, Category.class)).thenReturn(typedQuery);
        when(typedQuery.setParameter("pname", categoryName)).thenReturn(typedQuery);
        when(typedQuery.getSingleResult()).thenThrow(NoResultException.class);

        catalogService.findCategory(categoryName);
    }

    @Test(expected = ConstraintViolationException.class)
    public void testFindCategory_NullCategoryName() {
        catalogService.findCategory((String) null);
    }

    @Test(expected = NoResultException.class)
    public void testFindCategory_EmptyCategoryName() {
        String categoryName = "";

        when(em.createNamedQuery(Category.FIND_BY_NAME, Category.class)).thenReturn(typedQuery);
        when(typedQuery.setParameter("pname", categoryName)).thenReturn(typedQuery);
        when(typedQuery.getSingleResult()).thenThrow(NoResultException.class);

        catalogService.findCategory(categoryName);
    }

    @Test(expected = NoResultException.class)
    public void testFindCategory_CategoryNameWithOnlySpaces() {
        String categoryName = "    ";

        when(em.createNamedQuery(Category.FIND_BY_NAME, Category.class)).thenReturn(typedQuery);
        when(typedQuery.setParameter("pname", categoryName)).thenReturn(typedQuery);
        when(typedQuery.getSingleResult()).thenThrow(NoResultException.class);

        catalogService.findCategory(categoryName);
    }

    @Test
    public void testFindCategory_CategoryNameWithLeadingAndTrailingSpaces() {
        String categoryName = " Dogs ";
        Category category = new Category();
        category.setName(categoryName.trim());

        when(em.createNamedQuery(Category.FIND_BY_NAME, Category.class)).thenReturn(typedQuery);
        when(typedQuery.setParameter("pname", categoryName.trim())).thenReturn(typedQuery);
        when(typedQuery.getSingleResult()).thenReturn(category);

        Category result = catalogService.findCategory(categoryName);

        verify(em).createNamedQuery(Category.FIND_BY_NAME, Category.class);
        verify(typedQuery).setParameter("pname", categoryName.trim());
        verify(typedQuery).getSingleResult();

        assertEquals(category, result);
    }

    @Test(expected = NoResultException.class)
    public void testFindCategory_CategoryNameInDifferentCase() {
        String categoryName = "dogs";

        when(em.createNamedQuery(Category.FIND_BY_NAME, Category.class)).thenReturn(typedQuery);
        when(typedQuery.setParameter("pname", categoryName)).thenReturn(typedQuery);
        when(typedQuery.getSingleResult()).thenThrow(NoResultException.class);

        catalogService.findCategory(categoryName);
    }
}
