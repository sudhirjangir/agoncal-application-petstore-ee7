/*
Test generated by RoostGPT for test petstoredemo2 using AI Type Open AI and AI Model gpt-4

1. Scenario: Verify the functionality of createCategory when a valid Category object is passed.
   - Given a new valid Category object.
   - When we pass this object to the createCategory function.
   - Then the function should return the same Category object after persisting it into the database.

2. Scenario: Check the behavior of createCategory function when a null Category object is passed.
   - Given a null Category object.
   - When we pass this object to the createCategory function.
   - Then the function should throw a constraint violation exception as the category object is null.

3. Scenario: Verify the behavior of createCategory function when a Category object with existing category name is passed.
   - Given a Category object with a category name that already exists in the database.
   - When we pass this object to the createCategory function.
   - Then the function should throw a persistence exception or return an error, depending on how the underlying database handles unique constraints.

4. Scenario: Check the functionality of createCategory function when a Category object with no name is passed.
   - Given a Category object with no category name.
   - When we pass this object to the createCategory function.
   - Then the function should throw a constraint violation exception as the category name is a mandatory field.

5. Scenario: Verify the behavior of createCategory function when a Category object with a very long name is passed.
   - Given a Category object with a very long category name (more than the maximum allowed length).
   - When we pass this object to the createCategory function.
   - Then the function should throw a constraint violation exception as the category name length exceeds the maximum allowed length.

6. Scenario: Check the behavior of createCategory function when a Category object with special characters in the name is passed.
   - Given a Category object with category name containing special characters.
   - When we pass this object to the createCategory function.
   - Then the function should either persist the object and return it, or throw an exception, depending on how the underlying database handles special characters.

7. Scenario: Verify the behavior of createCategory function when a Category object with leading or trailing spaces in the name is passed.
   - Given a Category object with category name containing leading or trailing spaces.
   - When we pass this object to the createCategory function.
   - Then the function should persist the object and return it, ideally after trimming the spaces.
*/package org.agoncal.application.petstore.service;

import org.agoncal.application.petstore.model.Category;
import org.junit.Before;
import org.junit.Test;

import javax.persistence.EntityManager;
import javax.persistence.EntityExistsException;
import javax.persistence.PersistenceException;
import javax.validation.ConstraintViolationException;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

public class CatalogService_createCategory_eedbe5c31d_Test {

    private CatalogService catalogService;
    private EntityManager em;

    @Before
    public void setup() throws Exception {
        catalogService = new CatalogService();
        em = mock(EntityManager.class);

        // Use reflection to set the private field 'em' in 'catalogService'
        java.lang.reflect.Field field = catalogService.getClass().getDeclaredField("em");
        field.setAccessible(true);
        field.set(catalogService, em);
    }

    @Test
    public void testCreateCategory_ValidCategory() {
        Category category = new Category();
        category.setName("Valid Category");
        when(em.merge(any(Category.class))).thenReturn(category);
        Category returnedCategory = catalogService.createCategory(category);
        verify(em).persist(category);
        assertEquals(category.getName(), returnedCategory.getName());
    }

    @Test(expected = ConstraintViolationException.class)
    public void testCreateCategory_NullCategory() {
        catalogService.createCategory(null);
    }

    @Test(expected = PersistenceException.class)
    public void testCreateCategory_DuplicateCategory() {
        Category category = new Category();
        category.setName("Duplicate Category");
        when(em.merge(any(Category.class))).thenThrow(PersistenceException.class);
        catalogService.createCategory(category);
    }

    @Test(expected = ConstraintViolationException.class)
    public void testCreateCategory_NoNameCategory() {
        Category category = new Category();
        catalogService.createCategory(category);
    }

    @Test(expected = ConstraintViolationException.class)
    public void testCreateCategory_LongNameCategory() {
        Category category = new Category();
        String longName = new String(new char[100]).replace("\0", "a");
        category.setName(longName);
        catalogService.createCategory(category);
    }

    @Test
    public void testCreateCategory_SpecialCharNameCategory() {
        Category category = new Category();
        category.setName("Special@# Category");
        when(em.merge(any(Category.class))).thenReturn(category);
        Category returnedCategory = catalogService.createCategory(category);
        verify(em).persist(category);
        assertEquals(category.getName(), returnedCategory.getName());
    }

    @Test
    public void testCreateCategory_LeadingTrailingSpaceNameCategory() {
        Category category = new Category();
        category.setName(" Leading Trailing Space Category ");
        when(em.merge(any(Category.class))).thenReturn(category);
        Category returnedCategory = catalogService.createCategory(category);
        verify(em).persist(category);
        assertEquals(category.getName(), returnedCategory.getName());
    }
}
