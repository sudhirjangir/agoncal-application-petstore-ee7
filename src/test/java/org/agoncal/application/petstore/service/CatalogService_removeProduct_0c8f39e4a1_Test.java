/*
Test generated by RoostGPT for test petstoredemo2 using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Ensure the function removes a product correctly when a valid product id is given.
   - **Given** a valid product id that exists in the database.
   - **When** the removeProduct function is called with this id.
   - **Then** ensure the product is removed from the database.

2. **Scenario:** Ensure the function throws an exception when an invalid product id is given.
   - **Given** an invalid product id that does not exist in the database.
   - **When** the removeProduct function is called with this id.
   - **Then** ensure an exception is thrown.

3. **Scenario:** Ensure the function throws an exception when a null product id is given.
   - **Given** a null product id.
   - **When** the removeProduct function is called with this id.
   - **Then** ensure an exception is thrown due to the `@NotNull` annotation.

4. **Scenario:** Ensure the function behaves correctly when multiple products exist in the database.
   - **Given** multiple products exist in the database.
   - **When** the removeProduct function is called with a valid product id.
   - **Then** ensure only the product with the specified id is removed, and all other products remain unchanged.

5. **Scenario:** Ensure the function behaves correctly when only one product exists in the database.
   - **Given** only one product exists in the database.
   - **When** the removeProduct function is called with the id of this product.
   - **Then** ensure the product is removed and the database is empty.

6. **Scenario:** Ensure the function behaves correctly when the database is empty.
   - **Given** the database is empty.
   - **When** the removeProduct function is called with any product id.
   - **Then** ensure an exception is thrown as there are no products to remove.

7. **Scenario:** Validate the function handles concurrent requests correctly.
   - **Given** multiple concurrent requests to remove a product with the same id.
   - **When** these requests are processed.
   - **Then** ensure the product is removed only once and subsequent requests result in an exception.
*/package org.agoncal.application.petstore.service;

import org.agoncal.application.petstore.model.Product;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.persistence.EntityManager;
import javax.persistence.EntityNotFoundException;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class CatalogService_removeProduct_0c8f39e4a1_Test {

    @InjectMocks
    CatalogService catalogService;

    @Mock
    private EntityManager em;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testRemoveProduct_ValidId() {
        Product product = new Product();
        product.setId(1L);

        when(em.find(Product.class, 1L)).thenReturn(product);
        catalogService.removeProduct(1L);

        verify(em, times(1)).remove(any(Product.class));
    }

    @Test(expected = EntityNotFoundException.class)
    public void testRemoveProduct_InvalidId() {
        when(em.find(Product.class, 1L)).thenReturn(null);
        catalogService.removeProduct(1L);
    }

    @Test(expected = NullPointerException.class)
    public void testRemoveProduct_NullId() {
        catalogService.removeProduct(null);
    }

    @Test
    public void testRemoveProduct_MultipleProductsInDatabase() {
        Product product1 = new Product();
        product1.setId(1L);

        Product product2 = new Product();
        product2.setId(2L);

        when(em.find(Product.class, 1L)).thenReturn(product1);
        when(em.find(Product.class, 2L)).thenReturn(product2);

        catalogService.removeProduct(1L);

        verify(em, times(1)).remove(product1);
        verify(em, never()).remove(product2);
    }

    @Test(expected = EntityNotFoundException.class)
    public void testRemoveProduct_EmptyDatabase() {
        when(em.find(Product.class, 1L)).thenReturn(null);
        catalogService.removeProduct(1L);
    }

    @Test
    public void testRemoveProduct_ConcurrentRequests() {
        Product product = new Product();
        product.setId(1L);

        when(em.find(Product.class, 1L)).thenReturn(product).thenReturn(null);

        catalogService.removeProduct(1L);

        try {
            catalogService.removeProduct(1L);
        } catch (EntityNotFoundException e) {
            // Expected exception
        }

        verify(em, times(1)).remove(product);
    }
}
