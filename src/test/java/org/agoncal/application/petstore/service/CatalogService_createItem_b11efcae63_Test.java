// Test generated by RoostGPT for test petstore using AI Type Open AI and AI Model gpt-4

package org.agoncal.application.petstore.service;

import org.agoncal.application.petstore.model.Item;
import org.agoncal.application.petstore.model.Product;
import org.agoncal.application.petstore.model.Category;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.persistence.EntityManager;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

public class CatalogService_createItem_b11efcae63_Test {

    @InjectMocks
    CatalogService catalogService;

    @Mock
    EntityManager em;

    @BeforeEach
    public void init() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testCreateItem() {
        Item item = new Item();
        item.setName("TestItem");

        Product product = new Product();
        product.setName("TestProduct");

        Category category = new Category();
        category.setName("TestCategory");

        product.setCategory(category);
        item.setProduct(product);

        when(em.persist(any())).thenReturn(null);
        
        Item result = catalogService.createItem(item);
        
        verify(em, times(3)).persist(any());

        assertNotNull(result);
        assertEquals("TestItem", result.getName());
        assertEquals("TestProduct", result.getProduct().getName());
        assertEquals("TestCategory", result.getProduct().getCategory().getName());
    }

    @Test
    public void testCreateItemWithoutCategory() {
        Item item = new Item();
        item.setName("TestItem");

        Product product = new Product();
        product.setName("TestProduct");

        item.setProduct(product);

        when(em.persist(any())).thenReturn(null);

        Item result = catalogService.createItem(item);

        verify(em, times(2)).persist(any());

        assertNotNull(result);
        assertEquals("TestItem", result.getName());
        assertEquals("TestProduct", result.getProduct().getName());
    }
}
