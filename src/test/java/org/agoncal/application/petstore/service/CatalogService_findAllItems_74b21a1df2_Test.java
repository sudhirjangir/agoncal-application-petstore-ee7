// Test generated by RoostGPT for test petstore using AI Type Open AI and AI Model gpt-4

package org.agoncal.application.petstore.service;

import org.agoncal.application.petstore.model.Item;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class CatalogService_findAllItems_74b21a1df2_Test {

    @InjectMocks
    CatalogService catalogService;

    @Mock
    EntityManager em;

    @Mock
    TypedQuery<Item> query;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testFindAllItems() {
        Item item1 = new Item();
        item1.setId(1L);
        Item item2 = new Item();
        item2.setId(2L);
        List<Item> expectedItems = Arrays.asList(item1, item2);

        when(em.createNamedQuery(Item.FIND_ALL, Item.class)).thenReturn(query);
        when(query.getResultList()).thenReturn(expectedItems);

        List<Item> actualItems = catalogService.findAllItems();

        verify(em, times(1)).createNamedQuery(Item.FIND_ALL, Item.class);
        verify(query, times(1)).getResultList();
        assertEquals(expectedItems, actualItems);
    }

    @Test
    public void testFindAllItems_Empty() {
        List<Item> expectedItems = Arrays.asList();

        when(em.createNamedQuery(Item.FIND_ALL, Item.class)).thenReturn(query);
        when(query.getResultList()).thenReturn(expectedItems);

        List<Item> actualItems = catalogService.findAllItems();

        verify(em, times(1)).createNamedQuery(Item.FIND_ALL, Item.class);
        verify(query, times(1)).getResultList();
        assertEquals(expectedItems, actualItems);
    }
}
