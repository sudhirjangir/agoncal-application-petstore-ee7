/*
Test generated by RoostGPT for test petstoredemo2 using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Ensure the function removes a valid category from the database.
    - **Given:** A valid category exists in the database.
    - **When:** The `removeCategory` function is called with that category as a parameter.
    - **Then:** The category should be removed from the database.

2. **Scenario:** Ensure the function handles a category that doesn't exist in the database.
    - **Given:** A category that doesn't exist in the database.
    - **When:** The `removeCategory` function is called with that category as a parameter.
    - **Then:** The function should handle the situation gracefully - it should not throw any exceptions or errors.

3. **Scenario:** Test if the function can handle null category input.
    - **Given:** A null category.
    - **When:** The `removeCategory` function is called with null as a parameter.
    - **Then:** The function should throw a `ConstraintViolationException`.

4. **Scenario:** Ensure the function can handle a category with associated products.
    - **Given:** A category with associated products in the database.
    - **When:** The `removeCategory` function is called with that category as a parameter.
    - **Then:** The category should be removed and the associated products should either be removed or reassigned to a default category, depending on the business logic.

5. **Scenario:** Test if the function can handle a category with associated items.
    - **Given:** A category with associated items in the database.
    - **When:** The `removeCategory` function is called with that category as a parameter.
    - **Then:** The category should be removed and the associated items should either be removed or reassigned to a default category, depending on the business logic.

6. **Scenario:** Test if the function can handle an empty category.
    - **Given:** An empty category.
    - **When:** The `removeCategory` function is called with that category as a parameter.
    - **Then:** The function should handle the situation gracefully - it should not throw any exceptions or errors.

7. **Scenario:** Test if the function can handle a category with invalid data.
    - **Given:** A category with invalid data.
    - **When:** The `removeCategory` function is called with that category as a parameter.
    - **Then:** The function should throw an appropriate exception.
*/package org.agoncal.application.petstore.service;

import org.agoncal.application.petstore.model.Category;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.persistence.EntityManager;
import javax.validation.ConstraintViolationException;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class CatalogService_removeCategory_d8859f27bd_Test {

    @InjectMocks
    CatalogService catalogService;

    @Mock
    EntityManager em;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testRemoveCategory_Success() {
        Category category = mock(Category.class);
        doNothing().when(em).remove(any());

        catalogService.removeCategory(category);

        verify(em, times(1)).remove(any());
    }

    @Test(expected = ConstraintViolationException.class)
    public void testRemoveCategory_NullCategory() {
        catalogService.removeCategory((Category) null);
    }

    @Test
    public void testRemoveCategory_NonExistentCategory() {
        Category category = mock(Category.class);
        when(em.find(Category.class, category.getId())).thenReturn(null);

        catalogService.removeCategory(category);

        verify(em, times(0)).remove(any());
    }

    @Test
    public void testRemoveCategory_EmptyCategory() {
        Category category = new Category();

        catalogService.removeCategory(category);

        verify(em, times(1)).remove(any());
    }

    @Test(expected = RuntimeException.class)
    public void testRemoveCategory_InvalidData() {
        Category category = mock(Category.class);
        doThrow(RuntimeException.class).when(em).remove(any());

        catalogService.removeCategory(category);
    }
}
