// Test generated by RoostGPT for test petstore using AI Type Open AI and AI Model gpt-4

package org.agoncal.application.petstore.service;

import org.agoncal.application.petstore.model.Category;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class CatalogService_findAllCategories_e58973d6bc_Test {

    @InjectMocks
    CatalogService catalogService;

    @Mock
    EntityManager em;

    @Mock
    TypedQuery<Category> typedQuery;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testFindAllCategories() {
        Category cat1 = new Category();
        cat1.setId(1L);
        cat1.setName("Cat1");

        Category cat2 = new Category();
        cat2.setId(2L);
        cat2.setName("Cat2");

        List<Category> expectedCategories = Arrays.asList(cat1, cat2);

        when(em.createNamedQuery(Category.FIND_ALL, Category.class)).thenReturn(typedQuery);
        when(typedQuery.getResultList()).thenReturn(expectedCategories);

        List<Category> actualCategories = catalogService.findAllCategories();

        assertEquals(expectedCategories, actualCategories);
    }

    @Test
    void testFindAllCategories_Empty() {
        List<Category> expectedCategories = Arrays.asList();

        when(em.createNamedQuery(Category.FIND_ALL, Category.class)).thenReturn(typedQuery);
        when(typedQuery.getResultList()).thenReturn(expectedCategories);

        List<Category> actualCategories = catalogService.findAllCategories();

        assertEquals(expectedCategories, actualCategories);
    }
}
