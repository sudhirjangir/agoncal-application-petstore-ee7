/*
Test generated by RoostGPT for test petstoredemo2 using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Verify the function findAllCategories returns all categories present in the database.
   - **Expected Result:** The function should return a list of all categories present in the database.

2. **Scenario:** Validate the function findAllCategories when no categories are present in the database.
   - **Expected Result:** The function should return an empty list.

3. **Scenario:** Check the function findAllCategories returns categories in a specific order (if any order is defined in the named query).
   - **Expected Result:** The function should return categories in the specific order defined in the named query.

4. **Scenario:** Test the function findAllCategories when there are duplicate categories in the database.
   - **Expected Result:** The function should handle duplicates appropriately, depending on the requirement (either return duplicates or filter them).

5. **Scenario:** Verify the function findAllCategories when the database is disconnected or not accessible.
   - **Expected Result:** The function should handle the exception properly and provide an appropriate error message.

6. **Scenario:** Check the performance of the function findAllCategories when a large number of categories are present in the database.
   - **Expected Result:** The function should not take more than the acceptable time to execute and should not cause any performance issues.

7. **Scenario:** Test the function findAllCategories when there are special characters or non-English letters in category names.
   - **Expected Result:** The function should return categories correctly without any data loss or corruption.

8. **Scenario:** Validate the function findAllCategories when the named query (Category.FIND_ALL) is incorrect or does not exist.
   - **Expected Result:** The function should handle the exception properly and provide an appropriate error message. 

9. **Scenario:** Verify the function findAllCategories when the EntityManager (em) is not initialized or null.
   - **Expected Result:** The function should handle the exception properly and provide an appropriate error message.

10. **Scenario:** Check the function findAllCategories with simultaneous multiple requests.
   - **Expected Result:** The function should handle multiple requests properly and return correct results for each request.
*//*
Test generated by RoostGPT for test petstoredemo2 using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Verify the function findAllCategories returns all categories present in the database.
   - **Expected Result:** The function should return a list of all categories present in the database.

2. **Scenario:** Validate the function findAllCategories when no categories are present in the database.
   - **Expected Result:** The function should return an empty list.

3. **Scenario:** Check the function findAllCategories returns categories in a specific order (if any order is defined in the named query).
   - **Expected Result:** The function should return categories in the specific order defined in the named query.

4. **Scenario:** Test the function findAllCategories when there are duplicate categories in the database.
   - **Expected Result:** The function should handle duplicates appropriately, depending on the requirement (either return duplicates or filter them).

5. **Scenario:** Verify the function findAllCategories when the database is disconnected or not accessible.
   - **Expected Result:** The function should handle the exception properly and provide an appropriate error message.

6. **Scenario:** Check the performance of the function findAllCategories when a large number of categories are present in the database.
   - **Expected Result:** The function should not take more than the acceptable time to execute and should not cause any performance issues.

7. **Scenario:** Test the function findAllCategories when there are special characters or non-English letters in category names.
   - **Expected Result:** The function should return categories correctly without any data loss or corruption.

8. **Scenario:** Validate the function findAllCategories when the named query (Category.FIND_ALL) is incorrect or does not exist.
   - **Expected Result:** The function should handle the exception properly and provide an appropriate error message. 

9. **Scenario:** Verify the function findAllCategories when the EntityManager (em) is not initialized or null.
   - **Expected Result:** The function should handle the exception properly and provide an appropriate error message.

10. **Scenario:** Check the function findAllCategories with simultaneous multiple requests.
   - **Expected Result:** The function should handle multiple requests properly and return correct results for each request.
*/

package org.agoncal.application.petstore.service;

import org.agoncal.application.petstore.model.Category;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;

public class CatalogService_findAllCategories_e58973d6bc_Test {

    @Mock
    private EntityManager em;

    @Mock
    private TypedQuery<Category> typedQuery;

    private CatalogService catalogService;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        catalogService = new CatalogService();
        catalogService.em = em;
    }

    @Test
    public void testFindAllCategories_Success() {
        List<Category> expectedCategories = Arrays.asList(new Category(), new Category());
        when(em.createNamedQuery(Category.FIND_ALL, Category.class)).thenReturn(typedQuery);
        when(typedQuery.getResultList()).thenReturn(expectedCategories);

        List<Category> actualCategories = catalogService.findAllCategories();

        assertEquals(expectedCategories, actualCategories);
        verify(em).createNamedQuery(Category.FIND_ALL, Category.class);
        verify(typedQuery).getResultList();
    }

    @Test
    public void testFindAllCategories_NoCategories() {
        when(em.createNamedQuery(Category.FIND_ALL, Category.class)).thenReturn(typedQuery);
        when(typedQuery.getResultList()).thenReturn(Collections.emptyList());

        List<Category> actualCategories = catalogService.findAllCategories();

        assertTrue(actualCategories.isEmpty());
        verify(em).createNamedQuery(Category.FIND_ALL, Category.class);
        verify(typedQuery).getResultList();
    }

    // TODO: Add more test cases for other scenarios mentioned in the instructions
}
