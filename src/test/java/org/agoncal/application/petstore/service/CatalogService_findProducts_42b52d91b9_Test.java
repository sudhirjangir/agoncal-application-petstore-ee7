/*
Test generated by RoostGPT for test petstoredemo2 using AI Type Open AI and AI Model gpt-4

1. Scenario: Valid Category Name
   - Description: Test the business logic when a valid category name is provided.
   - Steps: Provide a category name that is known to exist in the database.
   - Expected Result: The function should return a list of products that belong to the given category.

2. Scenario: Invalid Category Name
   - Description: Test the business logic when an invalid category name is provided.
   - Steps: Provide a category name that is not present in the database.
   - Expected Result: The function should return an empty list as there are no products under the given category.

3. Scenario: Null Category Name
   - Description: Test the business logic when the category name is null.
   - Steps: Provide null as the category name.
   - Expected Result: The function should throw a constraint violation exception as the category name is annotated with @NotNull.

4. Scenario: Empty Category Name
   - Description: Test the business logic when the category name is an empty string.
   - Steps: Provide an empty string as the category name.
   - Expected Result: The function should return an empty list as there are no products under an empty category name.

5. Scenario: Case Sensitivity
   - Description: Test the business logic when the category name is provided in a different case.
   - Steps: Provide a category name in a different case than how it exists in the database.
   - Expected Result: Depending on the database setup, it should either return a list of products or an empty list.

6. Scenario: Multiple Products in a Category
   - Description: Test the business logic when the category name has multiple products.
   - Steps: Provide a category name that has multiple products in the database.
   - Expected Result: The function should return a list of all products under the given category.

7. Scenario: Single Product in a Category
   - Description: Test the business logic when the category name has a single product.
   - Steps: Provide a category name that has a single product in the database.
   - Expected Result: The function should return a list with the single product under the given category.
*/package org.agoncal.application.petstore.service;

import org.agoncal.application.petstore.model.Product;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.validation.ConstraintViolationException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.mockito.Mockito.*;

public class CatalogService_findProducts_42b52d91b9_Test {

    @Test
    public void testFindProductsWithValidCategoryName() {
        // Mocking
        EntityManager em = mock(EntityManager.class);
        TypedQuery query = mock(TypedQuery.class);

        when(em.createNamedQuery(Product.FIND_BY_CATEGORY_NAME, Product.class)).thenReturn(query);
        when(query.setParameter("pname", "validCategory")).thenReturn(query);
        when(query.getResultList()).thenReturn(Arrays.asList(new Product(), new Product()));

        CatalogService catalogService = new CatalogService();
        Mockito.doReturn(em).when(catalogService).getEntityManager();

        // Invoke
        List<Product> products = catalogService.findProducts("validCategory");

        // Assert
        Assert.assertEquals(2, products.size());
    }

    @Test
    public void testFindProductsWithInvalidCategoryName() {
        // Mocking
        EntityManager em = mock(EntityManager.class);
        TypedQuery query = mock(TypedQuery.class);

        when(em.createNamedQuery(Product.FIND_BY_CATEGORY_NAME, Product.class)).thenReturn(query);
        when(query.setParameter("pname", "invalidCategory")).thenReturn(query);
        when(query.getResultList()).thenReturn(Collections.emptyList());

        CatalogService catalogService = new CatalogService();
        Mockito.doReturn(em).when(catalogService).getEntityManager();

        // Invoke
        List<Product> products = catalogService.findProducts("invalidCategory");

        // Assert
        Assert.assertEquals(0, products.size());
    }

    @Test(expected = ConstraintViolationException.class)
    public void testFindProductsWithNullCategoryName() {
        // Mocking
        EntityManager em = mock(EntityManager.class);
        TypedQuery query = mock(TypedQuery.class);

        when(em.createNamedQuery(Product.FIND_BY_CATEGORY_NAME, Product.class)).thenReturn(query);
        when(query.setParameter("pname", null)).thenThrow(new ConstraintViolationException("", new HashSet<>(), new PathImpl()));

        CatalogService catalogService = new CatalogService();
        Mockito.doReturn(em).when(catalogService).getEntityManager();

        // Invoke
        catalogService.findProducts(null);
    }

    @Test
    public void testFindProductsWithEmptyCategoryName() {
        // Mocking
        EntityManager em = mock(EntityManager.class);
        TypedQuery query = mock(TypedQuery.class);

        when(em.createNamedQuery(Product.FIND_BY_CATEGORY_NAME, Product.class)).thenReturn(query);
        when(query.setParameter("pname", "")).thenReturn(query);
        when(query.getResultList()).thenReturn(Collections.emptyList());

        CatalogService catalogService = new CatalogService();
        Mockito.doReturn(em).when(catalogService).getEntityManager();

        // Invoke
        List<Product> products = catalogService.findProducts("");

        // Assert
        Assert.assertEquals(0, products.size());
    }
}
