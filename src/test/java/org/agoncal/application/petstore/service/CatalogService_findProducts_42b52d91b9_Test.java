// Test generated by RoostGPT for test petstore using AI Type Open AI and AI Model gpt-4

package org.agoncal.application.petstore.service;

import org.agoncal.application.petstore.model.Product;
import org.agoncal.application.petstore.model.Category;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

public class CatalogService_findProducts_42b52d91b9_Test {

    @Mock
    private EntityManager em;

    @Mock
    private TypedQuery<Product> query;

    @InjectMocks
    private CatalogService service;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testFindProducts() {
        Product product1 = new Product();
        product1.setName("Product1");

        Product product2 = new Product();
        product2.setName("Product2");

        List<Product> expectedProducts = Arrays.asList(product1, product2);
        
        when(em.createNamedQuery(anyString(), any(Class.class))).thenReturn(query);
        when(query.setParameter(anyString(), anyString())).thenReturn(query);
        when(query.getResultList()).thenReturn(expectedProducts);

        List<Product> actualProducts = service.findProducts("CategoryName");

        assertEquals(expectedProducts.size(), actualProducts.size());
        assertEquals(expectedProducts.get(0).getName(), actualProducts.get(0).getName());
        assertEquals(expectedProducts.get(1).getName(), actualProducts.get(1).getName());
    }

    @Test
    public void testFindProducts_NoProductsFound() {
        List<Product> expectedProducts = Arrays.asList();

        when(em.createNamedQuery(anyString(), any(Class.class))).thenReturn(query);
        when(query.setParameter(anyString(), anyString())).thenReturn(query);
        when(query.getResultList()).thenReturn(expectedProducts);

        List<Product> actualProducts = service.findProducts("CategoryName");

        assertEquals(expectedProducts.size(), actualProducts.size());
    }
}
